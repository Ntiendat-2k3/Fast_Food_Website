"use client"

import { useContext, useState, useEffect } from "react"
import { motion } from "framer-motion"
import { useNavigate } from "react-router-dom"
import { StoreContext } from "../../context/StoreContext"
import SuggestedDrinkRowItem from "./SuggestedDrinkRowItem"
import LoadingSpinner from "../common/LoadingSpinner"
import EmptyState from "../common/EmptyState"
import { slugify } from "../../utils/slugify"
import axios from "axios"

const SuggestedDrinks = ({ productCategory, category, isCompact = false }) => {
  const { url, addToCart } = useContext(StoreContext)
  const navigate = useNavigate()

  const [drinks, setDrinks] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)
  const [debugInfo, setDebugInfo] = useState(null)

  // Use productCategory first, then fallback to category prop
  const targetCategory = productCategory || category

  useEffect(() => {
    const fetchData = async () => {
      if (!targetCategory || !url) {
        console.log("‚ùå Missing category or URL:", { targetCategory, url })
        return
      }

      setIsLoading(true)
      setError(null)

      try {
        console.log(`üîç Fetching suggested drinks for category: "${targetCategory}"`)

        // First get debug info
        const debugResponse = await axios.get(
          `${url}/api/food/debug-suggested-drinks/${encodeURIComponent(targetCategory)}`,
        )
        console.log("üêõ Debug info:", debugResponse.data)
        setDebugInfo(debugResponse.data.debug)

        // Then get suggested drinks
        const response = await axios.get(
          `${url}/api/food/suggested-drinks/${encodeURIComponent(targetCategory)}?limit=4`,
        )
        console.log("üçπ Suggested drinks response:", response.data)

        if (response.data.success) {
          setDrinks(response.data.data)
          console.log("‚úÖ Successfully loaded drinks:", response.data.data.length)
        } else {
          setError(response.data.message || "Kh√¥ng th·ªÉ t·∫£i g·ª£i √Ω ƒë·ªì u·ªëng")
          console.log("‚ùå Error from API:", response.data.message)
        }
      } catch (error) {
        console.error("üí• Error fetching suggested drinks:", error)
        setError("L·ªói khi t·∫£i g·ª£i √Ω ƒë·ªì u·ªëng")

        // Fallback: load random drinks
        try {
          console.log("üîÑ Trying fallback - loading random drinks")
          const fallbackResponse = await axios.get(`${url}/api/food/category/ƒê·ªì u·ªëng`)
          if (fallbackResponse.data.success) {
            console.log("‚úÖ Fallback successful, got drinks:", fallbackResponse.data.data.length)
            setDrinks(fallbackResponse.data.data.slice(0, 4))
            setError(null) // Clear error since fallback worked
          }
        } catch (fallbackError) {
          console.error("üí• Fallback error:", fallbackError)
        }
      } finally {
        setIsLoading(false)
      }
    }

    fetchData()
  }, [targetCategory, url])

  // Show debug info if category is missing
  if (!targetCategory) {
    return (
      <div className="text-center py-4 bg-red-900/20 rounded-lg border border-red-500/30">
        <p className="text-red-400 text-sm font-semibold">‚ö†Ô∏è L·ªói: Kh√¥ng c√≥ category</p>
        <p className="text-red-300 text-xs mt-1">
          Component SuggestedDrinks c·∫ßn prop "productCategory" ho·∫∑c "category"
        </p>
        <div className="text-xs text-gray-400 mt-2">
          <p>Props nh·∫≠n ƒë∆∞·ª£c:</p>
          <pre className="text-left bg-gray-800 p-2 rounded mt-1 text-xs">
            {JSON.stringify({ productCategory, category }, null, 2)}
          </pre>
        </div>
      </div>
    )
  }

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-24">
        <LoadingSpinner />
        <span className="ml-2 text-gray-400 text-sm">ƒêang t·∫£i g·ª£i √Ω cho {targetCategory}...</span>
      </div>
    )
  }

  if (error && drinks.length === 0) {
    return (
      <div className="text-center py-4">
        <p className="text-red-500 text-sm">{error}</p>
        {debugInfo && (
          <div className="mt-2 text-xs text-gray-400 bg-gray-800 p-2 rounded">
            <p>
              Debug: {debugInfo.totalOrders} orders, {debugInfo.categoryFoods} category foods, {debugInfo.drinks} drinks
            </p>
            <p>Categories: {debugInfo.allCategories?.join(", ")}</p>
            <p>
              Orders with {targetCategory}: {debugInfo.ordersWithCategory}
            </p>
          </div>
        )}
      </div>
    )
  }

  if (!drinks || drinks.length === 0) {
    return (
      <EmptyState
        title="Kh√¥ng c√≥ ƒë·ªì u·ªëng g·ª£i √Ω"
        description={`Hi·ªán t·∫°i kh√¥ng c√≥ ƒë·ªì u·ªëng n√†o ƒë∆∞·ª£c g·ª£i √Ω cho danh m·ª•c ${targetCategory}.`}
        className="py-4"
      />
    )
  }

  const displayDrinks = isCompact ? drinks.slice(0, 2) : drinks

  return (
    <section className={`${isCompact ? "py-4" : "py-8"}`}>
      <div className="text-center mb-4">
        <h3 className={`${isCompact ? "text-xl" : "text-2xl"} font-bold text-white mb-2`}>
          ƒê·ªì u·ªëng ƒë∆∞·ª£c mua c√πng {targetCategory}
        </h3>
        <p className="text-gray-300 text-sm">
          Nh·ªØng ƒë·ªì u·ªëng ph·ªï bi·∫øn nh·∫•t ƒë∆∞·ª£c kh√°ch h√†ng ch·ªçn c√πng v·ªõi {targetCategory}
        </p>
        {debugInfo && (
          <p className="text-xs text-gray-500 mt-1">
            Debug: {debugInfo.ordersWithCategory} orders found with {targetCategory}
          </p>
        )}
      </div>

      <motion.div
        className="flex flex-col gap-4"
        initial="hidden"
        animate="visible"
        variants={{
          hidden: { opacity: 0 },
          visible: {
            opacity: 1,
            transition: {
              staggerChildren: 0.1,
            },
          },
        }}
      >
        {displayDrinks.map((item, index) => (
          <motion.div
            key={item._id}
            variants={{
              hidden: { opacity: 0, y: 20 },
              visible: { opacity: 1, y: 0 },
            }}
            className="relative"
          >
            <SuggestedDrinkRowItem item={item} url={url} addToCart={addToCart} />
            {item.purchaseCount && (
              <div className="absolute top-2 right-2 bg-primary text-white text-xs px-2 py-1 rounded-full">
                ƒê√£ mua {item.purchaseCount} l·∫ßn
              </div>
            )}
          </motion.div>
        ))}
      </motion.div>

      {isCompact && drinks.length > displayDrinks.length && (
        <div className="text-center mt-4">
          <button
            onClick={() => navigate(`/foods?category=${slugify("ƒê·ªì u·ªëng")}`)}
            className="text-primary hover:underline text-sm font-semibold transition-colors duration-200"
          >
            Xem th√™m ƒë·ªì u·ªëng kh√°c ({drinks.length - displayDrinks.length} s·∫£n ph·∫©m)
          </button>
        </div>
      )}
    </section>
  )
}

export default SuggestedDrinks
