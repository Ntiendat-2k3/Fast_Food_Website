import categoryModel from "../models/categoryModel.js"

// Default categories
const defaultCategories = [
  { name: "Burger", icon: "üçî", description: "Burger th∆°m ngon v·ªõi patty t∆∞∆°i v√† topping ƒë·∫∑c bi·ªát", order: 1 },
  { name: "Burito", icon: "üåØ", description: "Burito cu·ªën ƒë·∫ßy ƒë·ªß dinh d∆∞·ª°ng v√† h∆∞∆°ng v·ªã Mexico", order: 2 },
  { name: "G√†", icon: "üçó", description: "G√† n∆∞·ªõng, chi√™n gi√≤n v·ªõi gia v·ªã b√≠ m·∫≠t", order: 3 },
  { name: "Hot dog", icon: "üå≠", description: "Hotdog n∆∞·ªõng th∆°m l·ª´ng v·ªõi s·ªët ƒë·∫∑c tr∆∞ng", order: 4 },
  { name: "Pasta", icon: "üçù", description: "Pasta √ù ch√≠nh g·ªëc v·ªõi s·ªët kem v√† c√† chua", order: 5 },
  { name: "Salad", icon: "ü•ó", description: "Salad t∆∞∆°i m√°t v·ªõi rau c·ªß organic", order: 6 },
  { name: "Sandwich", icon: "ü•™", description: "Sandwich th∆°m ngon v·ªõi nh√¢n ƒëa d·∫°ng", order: 7 },
  { name: "Tart", icon: "ü•ß", description: "Tart ng·ªçt ng√†o ho√†n h·∫£o cho b·ªØa tr√°ng mi·ªáng", order: 8 },
]

// Initialize default categories if none exist
const initializeDefaultCategories = async () => {
  try {
    const count = await categoryModel.countDocuments()
    if (count === 0) {
      await categoryModel.insertMany(defaultCategories)
      console.log("Default categories initialized")
    }
  } catch (error) {
    console.error("Error initializing default categories:", error)
  }
}

// Add category
const addCategory = async (req, res) => {
  try {
    const { name, icon, description, order } = req.body

    // Check if category already exists
    const existingCategory = await categoryModel.findOne({ name })
    if (existingCategory) {
      return res.json({ success: false, message: "Danh m·ª•c ƒë√£ t·ªìn t·∫°i" })
    }

    const category = new categoryModel({
      name,
      icon,
      description,
      order: order || 0,
    })

    await category.save()
    res.json({ success: true, message: "Th√™m danh m·ª•c th√†nh c√¥ng", data: category })
  } catch (error) {
    console.log(error)
    res.json({ success: false, message: "L·ªói khi th√™m danh m·ª•c" })
  }
}

// Get all categories
const listCategories = async (req, res) => {
  try {
    // Initialize default categories if none exist
    await initializeDefaultCategories()

    const categories = await categoryModel.find({}).sort({ order: 1, name: 1 })
    res.json({ success: true, data: categories })
  } catch (error) {
    console.log(error)
    res.json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch danh m·ª•c" })
  }
}

// Get active categories only
const getActiveCategories = async (req, res) => {
  try {
    // Initialize default categories if none exist
    await initializeDefaultCategories()

    const categories = await categoryModel.find({ isActive: true }).sort({ order: 1, name: 1 })
    res.json({ success: true, data: categories })
  } catch (error) {
    console.log(error)
    res.json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch danh m·ª•c" })
  }
}

// Get category by ID
const getCategoryById = async (req, res) => {
  try {
    const { id } = req.params
    const category = await categoryModel.findById(id)

    if (!category) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" })
    }

    res.json({ success: true, data: category })
  } catch (error) {
    console.log(error)
    res.json({ success: false, message: "L·ªói khi l·∫•y th√¥ng tin danh m·ª•c" })
  }
}

// Update category
const updateCategory = async (req, res) => {
  try {
    const { id, name, icon, description, isActive, order } = req.body

    // Check if another category with same name exists
    const existingCategory = await categoryModel.findOne({ name, _id: { $ne: id } })
    if (existingCategory) {
      return res.json({ success: false, message: "T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i" })
    }

    const updatedCategory = await categoryModel.findByIdAndUpdate(
      id,
      {
        name,
        icon,
        description,
        isActive,
        order,
        updatedAt: Date.now(),
      },
      { new: true },
    )

    if (!updatedCategory) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" })
    }

    res.json({ success: true, message: "C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng", data: updatedCategory })
  } catch (error) {
    console.log(error)
    res.json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c" })
  }
}

// Delete category
const removeCategory = async (req, res) => {
  try {
    const { id } = req.body

    // Check if category has products
    const foodModel = (await import("../models/foodModel.js")).default
    const productsCount = await foodModel.countDocuments({ category: id })

    if (productsCount > 0) {
      return res.json({
        success: false,
        message: `Kh√¥ng th·ªÉ x√≥a danh m·ª•c n√†y v√¨ c√≥ ${productsCount} s·∫£n ph·∫©m ƒëang s·ª≠ d·ª•ng`,
      })
    }

    const deletedCategory = await categoryModel.findByIdAndDelete(id)

    if (!deletedCategory) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" })
    }

    res.json({ success: true, message: "X√≥a danh m·ª•c th√†nh c√¥ng" })
  } catch (error) {
    console.log(error)
    res.json({ success: false, message: "L·ªói khi x√≥a danh m·ª•c" })
  }
}

// Toggle category status
const toggleCategoryStatus = async (req, res) => {
  try {
    const { id } = req.body

    const category = await categoryModel.findById(id)
    if (!category) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" })
    }

    category.isActive = !category.isActive
    category.updatedAt = Date.now()
    await category.save()

    res.json({
      success: true,
      message: `${category.isActive ? "K√≠ch ho·∫°t" : "V√¥ hi·ªáu h√≥a"} danh m·ª•c th√†nh c√¥ng`,
      data: category,
    })
  } catch (error) {
    console.log(error)
    res.json({ success: false, message: "L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i danh m·ª•c" })
  }
}

export {
  addCategory,
  listCategories,
  getActiveCategories,
  getCategoryById,
  updateCategory,
  removeCategory,
  toggleCategoryStatus,
}
